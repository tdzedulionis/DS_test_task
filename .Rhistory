data <- data %>%
mutate(
date = as.Date(date),
# Assign a model number for each of article_no
model_nr = match(article_no, unique(article_no)),
# Add column for weekdays
weekday = weekdays(date)) %>%
# Add holidays
left_join(holidays, by = c("date" = "holiday")) %>%
mutate(is_holiday = as.factor(ifelse(is.na(is_holiday), 0, is_holiday))) %>%
mutate(month = as.factor(month(date)))
View(data)
rm(list = ls())
options(java.parameters="-Xmx5000m")
# Load libraries ----------------------------------------------------------
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# Source ------------------------------------------------------------------
# functions
source("00_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis (EDA)
source("03_eda.R")
model <- 1
# Empty list to store models
models <- list()
data <- nested_data %>% filter(model_number == model)
article_no <- data %>% select(article_no) %>% unnest()
zg <- data %>% select(zg_values) %>% unnest()
xmat <- data %>% select(xmat) %>% unnest()
outliers <- data %>% select(outlier) %>% unnest()
# Dependant and exogenous variables that will be used for modelling
xmat <- xmat %>%
mutate(across(where(~ all(. %in% c(0, 1))), as.factor)) %>%
# select(zg, where(~!any(is.na(.)) & is.numeric(.) | is.factor(.) | is.character(.))) %>%
select(zg, where(~is.numeric(.) | is.factor(.) | is.character(.))) %>%
select(-c("article_no", "model_nr")) %>%
as.data.frame()
View(xmat)
# Empty list to store models
models <- list()
for (model in unique(nested_data$model_number)){
# |---- Data ----
data <- nested_data %>% filter(model_number == model)
article_no <- data %>% select(article_no) %>% unnest()
zg <- data %>% select(zg_values) %>% unnest()
xmat <- data %>% select(xmat) %>% unnest()
outliers <- data %>% select(outlier) %>% unnest()
# Dependant and exogenous variables that will be used for modelling
xmat <- xmat %>%
mutate(across(where(~ all(. %in% c(0, 1))), as.factor)) %>%
# select(zg, where(~!any(is.na(.)) & is.numeric(.) | is.factor(.) | is.character(.))) %>%
select(zg, where(~is.numeric(.) | is.factor(.) | is.character(.))) %>%
select(-c("article_no", "model_nr")) %>%
as.data.frame()
# |---- BART modelling ----
y_xmat <- xmat %>% pull(zg)
df_xmat <- xmat %>% select(-zg)
# Model
set_bart_machine_num_cores(4)
set.seed(seed)
# Search for optimal hyperparameters (Time consuming, Re-Run only if data changes)
# Square-Root transformation for dependent variable
bart_machine_cv <- bartMachineCV(df_xmat,
sqrt(y_xmat),
use_missing_data = TRUE,
seed = seed,
k_cvs = c(1, 2, 3),
k_folds = 10,
num_tree_cvs = c(seq(50, 200, by = 25)),
num_iterations_after_burn_in=2000,
num_burn_in = 300,
serialize = TRUE,
nu_q_cvs = list(c(3, 0.9), c(3, 0.99), c(10, 0.75)))
summary(bart_machine_cv)
plot_convergence_diagnostics(bart_machine_cv)
check_bart_error_assumptions(bart_machine_cv)
investigate_var_importance(bart_machine_cv, num_replicates_for_avg = 20)
plot_y_vs_yhat(bart_machine_cv, prediction_intervals = TRUE)
# Saving model
models[paste0("model_nr_",model, "_BART")] <- list(bart_machine_cv)
gc()
}
# Saving models to log folder
save(models, file = paste0("logs/models.RData"))
# Predicting -----------------------------------------------------------------------------------------------------
if (renew_models == T){
predictions <- list()
for (model in unique(nested_data$model_number)){
# |---- Data ----
data <- nested_data %>% filter(model_number == model)
article_no <- data %>% select(article_no) %>% unnest()
fxmat <- data %>% select(fxmat) %>% unnest()
outliers <- data %>% select(outlier) %>% unnest()
fxmat <- fxmat %>%
mutate(across(where(~ all(. %in% c(0, 1))), as.factor)) %>%
select(zg, where(~is.numeric(.) | is.factor(.) | is.character(.))) %>%
select(-c("article_no", "model_nr")) %>%
as.data.frame()
# |---- Predictions ----
df_fxmat <- select(fxmat, -zg)
prediction <- predict(models[[paste0("model_nr_",model, "_BART")]], df_fxmat)^2
prediction <- data.frame(zg = prediction,
date = data %>% select(fxmat) %>% unnest() %>% select(date))
# Saving variables importance information
var_importance <- investigate_var_importance(models[[paste0("model_nr_",model, "_BART")]],
plot = F, type = "trees")
# Prediction intervals
pred_interval <- calc_prediction_intervals(models[[paste0("model_nr_",model, "_BART")]], df_fxmat) %>%
.[["interval"]] %>%
replace(., . < 0, 0 ) %>%
data.frame() %>%
mutate(date = data %>% select(fxmat) %>% unnest() %>% pull(date),
pi_lower_bd = pi_lower_bd^2,
pi_upper_bd = pi_upper_bd^2)
predictions[paste0("model_nr_",model, "_prediction")] <- list(prediction)
predictions[paste0("model_nr_",model, "_var_importance")] <- list(var_importance)
predictions[paste0("model_nr_",model, "_pred_intervals")] <- list(pred_interval)
}
# Saving newest predictions as default
save(predictions, file = paste0("logs/predictions.RData"))
} else load(predictions_path)
# Plotting ----------------------------------------------------------------
# Plot forecasted values
forecasted_plots <- lapply(unique(nested_data$model_number), function(x){
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
})
grid.arrange(grobs = forecasted_plots, ncol = 2)
rm(list = ls())
options(java.parameters="-Xmx5000m")
# Load libraries ----------------------------------------------------------
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# Source ------------------------------------------------------------------
# functions
source("00_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis (EDA)
source("03_eda.R")
# Modelling
source("04_modelling.R")
# Predictions
source("05_predictions.R")
grid.arrange(grobs = forecasted_plots, ncol = 2)
rm(list = ls())
options(java.parameters="-Xmx5000m")
# Load libraries ----------------------------------------------------------
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# Source ------------------------------------------------------------------
# functions
source("00_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis (EDA)
source("03_eda.R")
# Modelling
source("04_modelling.R")
# Predicting -----------------------------------------------------------------------------------------------------
if (renew_models == T){
predictions <- list()
for (model in unique(nested_data$model_number)){
# |---- Data ----
data <- nested_data %>% filter(model_number == model)
article_no <- data %>% select(article_no) %>% unnest()
fxmat <- data %>% select(fxmat) %>% unnest()
outliers <- data %>% select(outlier) %>% unnest()
fxmat <- fxmat %>%
mutate(across(where(~ all(. %in% c(0, 1))), as.factor)) %>%
select(zg, where(~is.numeric(.) | is.factor(.) | is.character(.))) %>%
select(-c("article_no", "model_nr")) %>%
as.data.frame()
# |---- Predictions ----
df_fxmat <- select(fxmat, -zg)
prediction <- predict(models[[paste0("model_nr_",model, "_BART")]], df_fxmat)^2
prediction <- data.frame(zg = prediction,
date = data %>% select(fxmat) %>% unnest() %>% select(date))
# Saving variables importance information
var_importance <- investigate_var_importance(models[[paste0("model_nr_",model, "_BART")]],
plot = F, type = "trees")
# Prediction intervals
pred_interval <- calc_prediction_intervals(models[[paste0("model_nr_",model, "_BART")]], df_fxmat) %>%
.[["interval"]] %>%
replace(., . < 0, 0 ) %>%
data.frame() %>%
mutate(date = data %>% select(fxmat) %>% unnest() %>% pull(date),
pi_lower_bd = pi_lower_bd^2,
pi_upper_bd = pi_upper_bd^2)
predictions[paste0("model_nr_",model, "_prediction")] <- list(prediction)
predictions[paste0("model_nr_",model, "_var_importance")] <- list(var_importance)
predictions[paste0("model_nr_",model, "_pred_intervals")] <- list(pred_interval)
}
# Saving newest predictions as default
save(predictions, file = paste0("logs/predictions.RData"))
} else load(predictions_path)
# Plotting ----------------------------------------------------------------
# Plot forecasted values
forecasted_plots <- lapply(unique(nested_data$model_number), function(x){
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
})
grid.arrange(grobs = forecasted_plots, ncol = 2)
# Plot forecasted values
forecasted_plots <- lapply(unique(nested_data$model_number), function(x){
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
})
grid.arrange(grobs = forecasted_plots[1:2], ncol = 2)
pdf("plots/promo_plots(1).pdf", width=15, height=20)
grid.arrange(grobs = promo_plots[1:2], nrows = 2, ncol = 1)
dev.off()
pdf("plots/promo_plots(2).pdf", width=15, height=20)
grid.arrange(grobs = promo_plots[3:4], nrows = 2, ncol = 1)
dev.off()
pdf("plots/promo_plots(1).pdf", width=10, height=15)
pdf("plots/promo_plots(1).pdf", width=10, height=15)
grid.arrange(grobs = promo_plots[1:2], nrows = 2, ncol = 1)
dev.off()
pdf("plots/promo_plots(1).pdf", width=10, height=15)
grid.arrange(grobs = promo_plots[1:2], nrows = 2, ncol = 1)
dev.off()
pdf("plots/promo_plots(2).pdf", width=10, height=15)
grid.arrange(grobs = promo_plots[3:4], nrows = 2, ncol = 1)
dev.off()
View(models)
models$model_nr_1_BART
plot_y_vs_yhat(models$model_nr_1_BART, prediction_intervals = TRUE)
plot_y_vs_yhat(models$model_nr_2_BART, prediction_intervals = TRUE)
plot_y_vs_yhat(models$model_nr_3_BART, prediction_intervals = TRUE)
plot_y_vs_yhat(models$model_nr_4_BART, prediction_intervals = TRUE)
plot_convergence_diagnostics(models$model_nr_1_BART)
plot_y_vs_yhat(models$model_nr_2_BART, prediction_intervals = TRUE)
plot_convergence_diagnostics(models$model_nr_2_BART)
plot_convergence_diagnostics(models$model_nr_3_BART)
plot_convergence_diagnostics(models$model_nr_4_BART)
plot_var_importance(model, bottom_margin = 12)
model <- 1
for(model in unique(nested_data$model_number)){
pdf(file = paste0("plots/model_",model,"_VAR_Importance.pdf"))
plot_var_importance(model, bottom_margin = 12)
dev.off()
}
grid.arrange(grobs = forecasted_plots, ncol = 2)
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
x <- 1
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
# Plot forecasted values
forecasted_plots <- lapply(unique(nested_data$model_number), function(x){
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"))
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
dev.off()
})
length(forecasted_plots)
forecasted_plots[1]
forecasted_plots[[2]]
forecasted_plots[[2]]
forecasted_plots
forecasted_plots[[1]]
dev.off()
dev.off()
forecasted_plots[[1]]
# Plot forecasted values
forecasted_plots <- lapply(unique(nested_data$model_number), function(x){
actual_data <- get_plot_data(x) %>% select(zg, date) %>% mutate(type = "Actual")
predicted_data <- predictions[[paste0("model_nr_",x, "_prediction")]] %>%
mutate(type = "Forecasted")
pred_intervals = predictions[[paste0("model_nr_",x, "_pred_intervals")]]
plot_forecast(actual = actual_data,
predicted = predicted_data,
pred_interval = pred_intervals,
model_nr = x)
})
forecasted_plots[[1]]
for(x in 1:length(forecasted_plots)){
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"))
forecasted_plots[[x]]
dev.off()
}
for(x in 1:length(forecasted_plots)){
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"))
forecasted_plots[[x]]
dev.off()
}
forecasted_plots[[x]]
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
forecasted_plots[[x]]
for(x in 1:length(forecasted_plots)){
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
}
# Save
for(x in 1:length(forecasted_plots)){
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
}
forecasted_plots[[1]]
x
x <- 1
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
x = 2
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
x = 3
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
x = 4
pdf(file = paste0("plots/model_",x,"_forecasts.pdf"), , width=17, height=8)
forecasted_plots[[x]]
dev.off()
source("Raport.qmd")
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine",
"knitr")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
knitr::knit("Raport.qmd")
knitr::knit("Raport.qmd")
rmarkdown::render("Raport.qmd")
library(quatro)
install.packages("quatro")
library("quatro")
rmarkdown::render("raport.Rmd")
rmarkdown::render("raport.Rmd", output_format = "pdf")
?rmarkdown::render()
rmarkdown::render("raport.Rmd", output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "raport/presentation.pdf"
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "raport/presentation.pdf",
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "raport-presentation.pdf",
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "output/raport-presentation.pdf",
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "output/raport-presentation.pdf",
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "output/raport-presentation.pdf",
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "output/raport-presentation.pdf",
output_format = "pdf_document")
rmarkdown::render("raport.Rmd",
output_file = "output/raport-presentation.pdf",
output_format = "pdf_document")
wb <- createWorkbook()
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine",
"openxlsx")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
wb <- createWorkbook()
nested_data$model_number
model <- 1
View(nested_data)
nested_data %>% filter(model_number == model) %>% pull(article_no)
nested_data %>% filter(model_number == model) %>% pull(article_no) %>% .[[1]]
paste0(model, " - article no. ", nested_data %>% filter(model_number == model) %>% pull(article_no) %>% .[[1]])
predictions[[paste0("model_nr_",model, "_prediction")]]
wb <- createWorkbook()
for(model in nested_data$model_number){
sheet_name <- paste0(model,
" - article no. ",
nested_data %>%
filter(model_number == model) %>%
pull(article_no) %>% .[[1]])
addWorksheet(wb, sheet_name)
writeData(wb, sheet_name,
predictions[[paste0("model_nr_",model, "_prediction")]])
}
saveWorkbook(wb, file = paste0("output/", "final_output_",Sys.Date(),".xlsx"), overwrite = TRUE)
renv::init()
renv::activate()
renv::restore()
renv::snapshot()
# R @4.1.2 is used
rm(list = ls())
options(java.parameters="-Xmx5000m")
# For reproducability, renv is used.
# renv::activate()
# renv::restore()
# Load libraries ----------------------------------------------------------
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine",
"openxlsx")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
renv::install("bartMachine")
# R @4.1.2 is used
rm(list = ls())
options(java.parameters="-Xmx5000m")
# For reproducability, renv is used.
# renv::activate()
# renv::restore()
# Load libraries ----------------------------------------------------------
packages <- c("tidyverse",
"gridExtra",
"lares",
"bartMachine",
"openxlsx")
lapply(packages, function(x){
if(!requireNamespace(x, quietly = TRUE)) install.packages(x);
suppressPackageStartupMessages(library(x, character.only = T))}
)
# functions
source("00_functions.R")
# set constants
source("01_set_constants.R")
# Input
source("02_input.R")
# Exploratory data analysis (EDA)
source("03_eda.R")
# Modelling
source("04_modelling.R")
# Predictions
source("05_predictions.R")
# Finalise
source("06_finalise.R")
